version: '3.8'

services:
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9093,CONTROLLER://:9094,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - 'kafka_data:/bitnami/kafka'

  ingestor:
    container_name: ingestor
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: ingestor
    environment:
      - KAFKA_BROKER=kafka:9093
    restart: unless-stopped
    depends_on:
      - kafka
    command: ["./ingestor"]

  generator:
    container_name: generator
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: generator
    environment:
      - KAFKA_BROKER=kafka:9093
    restart: unless-stopped
    depends_on:
      - kafka
    command: ["./generator"]
    
  gateway:
    container_name: gateway
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: gateway
    environment:
      - KAFKA_BROKER=kafka:9093
      - PORT=:8080
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - kafka
    command: ["./gateway"]

  # --- ДОБАВЛЕН СЕРВИС NODE EXPORTER ---
  node_exporter:
    image: prom/node-exporter:v1.3.1
    container_name: node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    # Порт 9100 не нужно пробрасывать наружу, Prometheus сам найдет его по внутренней сети Docker

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - gateway
      - node_exporter # <-- Добавлена зависимость

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus

volumes:
  kafka_data:
    driver: local
