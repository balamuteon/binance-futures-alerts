services:
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092' # Порт для клиентов с вашего компьютера (localhost)
    environment:
      # Включаем KRaft режим (без Zookeeper)
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9093,CONTROLLER://:9094,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9093,EXTERNAL://192.168.0.193:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Включаем автоматическое создание топиков
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - 'kafka_data:/bitnami/kafka'

  # --- ingestor microservice ---
  ingestor:
    container_name: ingestor
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: ingestor
    environment:
      - KAFKA_BROKER=kafka:9093
    restart: unless-stopped
    depends_on:
      - kafka
    command: ["./ingestor"]

  # --- generator microservice ---
  generator:
    container_name: generator
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: generator
    environment:
      - KAFKA_BROKER=kafka:9093
    restart: unless-stopped
    depends_on:
      - kafka
    command: ["./generator"]
    
  # --- gateway microservice ---
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: gateway
    environment:
      - KAFKA_BROKER=kafka:9093
      - PORT=:8080
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - kafka
    command: ["./gateway"]

volumes:
  kafka_data:
    driver: local
