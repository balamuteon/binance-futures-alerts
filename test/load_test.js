// load_test.js
// [cmd] k6 run load_test.js
import ws from 'k6/ws';
import { check } from 'k6';

// --- Настройки теста ---
export const options = {
  // "Ступенчатый" сценарий нагрузки. Постепенно увеличиваем количество пользователей.
  stages: [
    { duration: '30s', target: 100 },    // за 30 секунд плавно доходим до 100 пользователей
    { duration: '1m', target: 1000 },   // за следующую минуту доходим до 1000
    { duration: '2m', target: 10000 },  // за следующие 2 минуты добираемся до 10 000
    { duration: '1m', target: 10000 },  // 1 минуту держим нагрузку в 10 000
    { duration: '30s', target: 0 },      // плавно снижаем нагрузку до 0
  ],
};

// --- Основная логика виртуального пользователя ---
export default function () {
  const url = 'ws://localhost:8080/ws/alerts'; // URL вашего WebSocket-сервера

  // Устанавливаем соединение
  const res = ws.connect(url, null, function (socket) {
    
    // Функция, которая выполняется после успешного подключения
    socket.on('open', () => {
      // Можно было бы что-то делать, но наша цель - просто держать соединение
    });

    // Обработчик входящих сообщений (алертов от сервера)
    socket.on('message', (data) => {
      // Мы просто логируем факт получения, чтобы убедиться, что связь есть
      // В реальном тесте на пропускную способность здесь бы считали сообщения
      // console.log(`Received message: ${data}`);
    });

    // Обработчик закрытия соединения
    socket.on('close', () => {
      // console.log('disconnected');
    });

    // Устанавливаем таймер, который будет поддерживать соединение активным,
    // отправляя ping каждые 20 секунд.
    socket.setInterval(() => {
      socket.ping();
    }, 20000);

  });

  // Проверяем, что рукопожатие прошло успешно (сервер ответил статусом 101)
  check(res, { 'status is 101': (r) => r && r.status === 101 });
}
